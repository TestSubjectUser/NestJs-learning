Feb24 - NestJs Day-1

https://github.com/arielweinberger/nestjs-recipe/branches/all
https://www.udemy.com/course/nestjs-zero-to-hero/?couponCode=ST4MT240225A

npm i -g @nestjs/cli
nest new project-name

src
app.controller.spec.ts
app.controller.ts
app.module.ts
app.service.ts
main.ts

app.controller.ts - A basic controller with a single route.
app.controller.spec.ts - The unit tests for the controller.
app.module.ts - The root module of the application.
app.service.ts - A basic service with a single method.
main.ts - The entry file of the application which uses the core function NestFactory to create a Nest application instance.

To create a Nest application instance, we use the core NestFactory class

By default, if any error happens while creating the application your app will exit with the code 1. If you want to make it throw an error instead disable the option abortOnError (e.g., NestFactory.create(AppModule, { abortOnError: false })).

Hint
To speed up the development process (x20 times faster builds), you can use the SWC builder by passing the -b swc flag to the start script, as follows npm run start -- -b swc.

Controllers
Controllers are responsible for handling incoming requests and sending responses back to the client.
a controller has multiple routes, and each route can perform a different action.
To create a basic controller, we use classes and decorators. Decorators link classes with the necessary metadata, allowing Nest to create a routing map that connects requests to their corresponding controllers.

Routing
@Controller() decorator, which is required to define a basic controller.
We'll specify an optional route path prefix of cats. Using a path prefix in the @Controller() decorator helps us group related routes together and reduces repetitive code.
if we want to group routes that manage interactions with a cat entity under the /cats path, we can specify the cats path prefix in the @Controller() decorator.

Hint
To create a controller using the CLI, simply execute the $ nest g controller [name] command.

Modules
A module is a class that is annotated with the @Module() decorator. This decorator provides metadata that Nest uses to organize and manage the application structure efficiently.

providers the providers that will be instantiated by the Nest injector and that may be shared at least across this module
controllers the set of controllers defined in this module which have to be instantiated
imports the list of imported modules that export the providers which are required in this module
exports the subset of providers that are provided by this module and should be available in other modules which import this module. You can use either the provider itself or just its token (provide value)

Route wildcards#
Pattern-based routes are also supported in NestJS. For example, the asterisk (\*) can be used as a wildcard to match any combination of characters in a route at the end of a path. In the following example, the findAll() method will be executed for any route that starts with abcd/, regardless of the number of characters that follow.

---

Task Management Application
nest new nestjs-task-management, yarn

delete - controller, service file.
yarn start:dev

creating a task module, g - generate
nest g --help

nest g module tasks
creating a tasks controller
nest gcontroller tasks --no-spec
--no-spec (flag, by default also generate test file, this defines it'll not generate that file)

creating a tasks service
nest g service tasks --no-spec

technically we can write in controller only but, as it grows it becomes cluter so it's good practise to maintain, and controllers only job is to receive request and ...

yarn add uuid

DTO - Data Transfer Object
dto dir under tasks, and file create-task.dto.ts
req comes - controller handles - defined param - req body goes to parameter of type of shape - into service.

Validation and error handling
NestJS Pipes

ValidationPipe - creating a task
we can get empty fields from user so we need to validate.

need two packages
yarn add class-validator class-transformer

use in dto files

app.useGlobalPipes(new ValidationPipe());
Automatically applies validation to all incoming requests based on the decorators inside your DTOs (Data Transfer Objects).

NestJS applies it globally when app.useGlobalPipes(new ValidationPipe()) is used inside main.ts.
The ValidationPipe automatically validates incoming request bodies against the DTO class before the request reaches the controller.
The class-validator decorators (like @IsNotEmpty()) inside CreateTaskDto are triggered.

app.useGlobalPipes(new ValidationPipe()) automatically applies validation to all DTOs across your app.
It works with class-validator decorators like @IsNotEmpty(), @IsEmail(), etc.
If a request does not match the DTO, NestJS will return a 400 Bad Request error automatically.
You don’t need to manually call validate() on every request—NestJS handles it for you.

Error Handling.

Data Persistence - PostgreSQL and TypeORM
running PostgreSQL via Docker

docker run --name postgres-nest -p 5432:5432 -e POSTGRES_PASSWORD=postgres -d postgres

docker container ls
docker container stop postgres-nest
docker container rm postgres-nest

pgAdmin - create server - give name, in connection give localhost in host name, give username pass
right click on database give name task-management

Object Relational Mapping(ORM) and TypeORM

setting up a Database Connection

yarn add typeorm @nestjs/typeorm pg
pg- official driver for postgres
postgres password = newpassword

TypeOrmModule.forRoot() sets up the connection to your PostgreSQL database with the specified configurations.

Whenever NestJS starts, it syncs your entities with the database (if synchronize is true), ensuring the database schema is up to date with the defined entities.

autoLoadEntities: true saves you from having to manually register every entity within the TypeORM configuration—allowing TypeORM to automatically detect them as long as they are imported properly in your modules.

Active Record VS Data Mapper Patterns
https://github.com/typeorm/typeorm

In TypeORM, a repository is a design pattern used to manage and interact with database entities. It provides a set of methods for querying and manipulating data in a specific entity's table. A repository is an abstraction layer between your application and the underlying database, offering a more convenient way to perform CRUD (Create, Read, Update, Delete) operations, as well as more complex queries.

A repository is a class that provides access to a specific entity or table in the database. In TypeORM, each entity (such as Task, User, etc.) has a corresponding repository that exposes methods for interacting with the corresponding database table.

In TypeORM, you inject the repository into your service using the @InjectRepository() decorator. Once injected, the repository provides various methods for interacting with the entity.

find(): Retrieve multiple records.
findOne(): Retrieve a single record based on conditions.
save(): Insert a new record or update an existing one.
remove(): Remove an entity from the database.
update(): Update specific fields of an entity.
delete(): Delete a record from the database.
count(): Count the number of records based on conditions.
query(): Execute custom raw SQL queries (for more complex use cases).

While raw SQL queries can still be used in TypeORM, repositories provide several advantages over manually writing SQL queries:

While raw SQL queries can still be used in TypeORM, repositories provide several advantages over manually writing SQL queries:

can remove uuid cause it'll be generated auto by typeORM
yarn remove uuid

repository api typeorm
error in pgAdmin connection so try to connect with mongoDB
