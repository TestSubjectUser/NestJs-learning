Feb24 - NestJs Day-1

npm i -g @nestjs/cli
nest new project-name

src
app.controller.spec.ts
app.controller.ts
app.module.ts
app.service.ts
main.ts

app.controller.ts - A basic controller with a single route.
app.controller.spec.ts - The unit tests for the controller.
app.module.ts - The root module of the application.
app.service.ts - A basic service with a single method.
main.ts - The entry file of the application which uses the core function NestFactory to create a Nest application instance.

To create a Nest application instance, we use the core NestFactory class

By default, if any error happens while creating the application your app will exit with the code 1. If you want to make it throw an error instead disable the option abortOnError (e.g., NestFactory.create(AppModule, { abortOnError: false })).

Hint
To speed up the development process (x20 times faster builds), you can use the SWC builder by passing the -b swc flag to the start script, as follows npm run start -- -b swc.

Controllers
Controllers are responsible for handling incoming requests and sending responses back to the client.
a controller has multiple routes, and each route can perform a different action.
To create a basic controller, we use classes and decorators. Decorators link classes with the necessary metadata, allowing Nest to create a routing map that connects requests to their corresponding controllers.

Routing
@Controller() decorator, which is required to define a basic controller.
We'll specify an optional route path prefix of cats. Using a path prefix in the @Controller() decorator helps us group related routes together and reduces repetitive code.
if we want to group routes that manage interactions with a cat entity under the /cats path, we can specify the cats path prefix in the @Controller() decorator.

Hint
To create a controller using the CLI, simply execute the $ nest g controller [name] command.

Modules
A module is a class that is annotated with the @Module() decorator. This decorator provides metadata that Nest uses to organize and manage the application structure efficiently.

providers the providers that will be instantiated by the Nest injector and that may be shared at least across this module
controllers the set of controllers defined in this module which have to be instantiated
imports the list of imported modules that export the providers which are required in this module
exports the subset of providers that are provided by this module and should be available in other modules which import this module. You can use either the provider itself or just its token (provide value)

Route wildcards#
Pattern-based routes are also supported in NestJS. For example, the asterisk (\*) can be used as a wildcard to match any combination of characters in a route at the end of a path. In the following example, the findAll() method will be executed for any route that starts with abcd/, regardless of the number of characters that follow.

---

Task Management Application
nest new nestjs-task-management, yarn

delete - controller, service file.
yarn start:dev

creating a task module, g - generate
nest g --help

nest g module tasks
creating a tasks controller
nest gcontroller tasks --no-spec
--no-spec (flag, by default also generate test file, this defines it'll not generate that file)

creating a tasks service
nest g service tasks --no-spec

technically we can write in controller only but, as it grows it becomes cluter so it's good practise to maintain, and controllers only job is to receive request and ...

yarn add uuid
