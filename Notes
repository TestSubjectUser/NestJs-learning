1️⃣ Create an orphan branch git checkout --orphan empty-branch Creates a new branch without history
2️⃣ Remove files (optional) git rm -rf . Clears all tracked files
3️⃣ Create an empty commit (optional) git commit --allow-empty -m "Initial empty commit" Required if pushing to remote
4️⃣ Push branch (optional) git push origin empty-branch Pushes the branch to the remote
5️⃣ Verify branch git branch Checks branch existence

---

Add MongoDB's GPG key
Add the MongoDB repository
Update package list
Install MongoDB
Start and enable MongoDB service
Verify and connect to MongoDB

---

## have to perform all this tasks to connect with local mongodb

nest new . --skip-git

Robo 3T | Free, open-source MongoDB GUI (formerly Robomongo)
install create connection with name local > save.

install graphql dependencies
yarn add graphql graphql-tools apollo-server-express @nestjs/graphql

yarn add @nestjs/apollo
yarn add @apollo/server

nest g module lesson

defining the lesson GraphQL type
ObjectType with types named lesson, four fields, ID field is type of ID

creating the lesson resolver
Resolvers are the core of how GraphQL works in NestJS. They handle queries, mutations, and subscriptions by fetching data from a database or another source.

@Resolver(() => LessonType): Specifies that this resolver handles LessonType queries.
Without resolvers, GraphQL would not know how to respond to API requests.

Every resolver is just a service that provides data. In NestJS, we must register services in the providers array so that NestJS can inject and manage them.

we can visit http://localhost:3000/graphql if server is running, check out schema

TypeORM MongoDB and Lesson Entity
yarn add typeorm @nestjs/typeorm mongodb @types/mongodb

LessonService and createLesson
nest g service lesson --no-spec

yarn add uuid
